{"pages":[],"posts":[{"title":"kali安装","text":"kali系统安装1.创建虚拟机； 2.选择典型；下一步； 3.选择安装程序光盘映像文件（kali官网下载的kali-Linux iOS镜像文件）；下一步； 4.选择Debian版本的aLinux系统；下一步； 5.自定义虚拟机名称和安装位置；下一步； 6.最大磁盘大小默认，将虚拟磁盘存储为单个文件；下一步； 7.完成； 8.开启此虚拟机； 9.选择图形化安装； 10.选择中文；继续； 11.选择中国；汉语； 12.主机名直接默认kali； 13.跳过，直接继续； 14.设置密码，跟window开机密码类似； 15.使用整个磁盘； 16.将所有文件放在同一个分区中； 17.结束分区设定并将修改写入磁盘； 19.安装系统需要些时间，耐心等待； 20.不使用网络镜像； 21.完成安装，点继续启动； 22.用户名默认为root，密码为先前设置的密码（第14步）； 打开kali之后出现乱码，这是由于最新版的kali默认不安装中文字体，所以中文会出现乱码；下面需要安装中文字体。 安装中文字体解决乱码1.打开终端； 2.输入安装命令： 1sudo apt-get install ttf-wqy-zenhei 出现这种结果说明是安装出现错误； 解决办法： 输入命令，编辑文件： 1vi /etc/apt/sources.list 按 i 进入编辑模式，写入官方源或国内源，这里我写的是阿里云的源；这里因为没有安装vmtools，所以只能手动输入； 12345678910111213kali官方源deb http://http.kali.org/kali kali-rolling main non-free contribdeb-src http://http.kali.org/kali kali-rolling main non-free contrib阿里云源deb http://mirrors.aliyun.com/kali kali-rolling main non-free contribdeb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib中科大源deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contribdeb-src http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib随便挑一个写进去（国内源会稍微快一点） 修改完成后按 Esc 退出编辑模式；然后输入 Shift + :wq 保存并退出； 然后输入命令： 1apt update 最后安装中文字体； 1sudo apt-get install ttf-wqy-zenhei 安装成功。 设置中文字体 1.重新配置安装的软件包，输入命令： 1dpkg-reconfigure locales 2.选择字符编码，按空格选中，按 Tab 键切换选项； 选中 en_US.UTF-8、zh_CN.GBK、zh_CN.UTF-8；然后按 Tab 键选择 OK（左边一个）后回车； 3.选择字符； 选择 zh_CN.UTF-8；然后按 Tab 键选择 OK 后回车； 最后输入命令reboot回车，重启即可。 安装谷歌中文输入法 基于fcitx输入法框架安装谷歌输入法。 打开终端输入如下命令： 123apt-get install fcitxapt-get install fcitx-googlepinyinreboot #重启 更换输入法；输入命令： 1im-config 将输入法由默认改为fcitx； Ctrl + 空格 可以切换中英文。 安装VMware Tools 安装VMware Tools后可以实现从物理机拖文件到虚拟机，屏幕自动铺满，粘贴复制，鼠标在物理机和虚拟机之间自由切换等等。 1.在虚拟机选项中点击安装VMware Tools； 弹出提示，直接叉掉即可； 2.然后桌面上会出现VMware Tools，右键点击选择挂载卷；然后双击打开； 3.将压缩文件拖到桌面上； 4.然后弹出卷； 5.解压文件，打开终端，切换到桌面文件夹，输入命令（tab键可以自动补全文件名）： 1tar zxvf VMwareTools-10.3.10-13959562.tar.gz 可以看到解压后桌面上多了一个文件夹； 6.切换到vmware-tools-distrib文件夹，运行文件vmware-install.pl； 根据提示选择回车，yes或no； 删除对应的压缩文件和文件夹； 最后reboot重启。","link":"/kali%E5%AE%89%E8%A3%85/"},{"title":"LAMP环境搭建","text":"源码包Apache https://mirrors.tuna.tsinghua.edu.cn/apache//httpd/httpd-2.4.43.tar.gz mysql https://src.fedoraproject.org/lookaside/extras/community-mysql/mysql-5.5.39.tar.gz/md5/b6f0ba553fb1ac839921b1135cb184ae/mysql-5.5.39.tar.gz PHP https://www.php.net/distributions/php-5.5.23.tar.gz PHPmyadmin https://files.phpmyadmin.net/phpMyAdmin/4.1.4/phpMyAdmin-4.1.4-all-languages.zip libxml2_2.9.1.tar.gz http://xmlsoft.org/sources/libxml2-2.9.10.tar.gz libmerypt-2.5.8.tar.gz https://nchc.dl.sourceforge.net/project/mcrypt/Libmcrypt/2.5.8/libmcrypt-2.5.8.tar.gz mhash-0.9.9.9.tar.gz https://nchc.dl.sourceforge.net/project/mhash/mhash/0.9.9.9/mhash-0.9.9.9.tar.gz mcrypt-2-6.8-tar.gz https://nchc.dl.sourceforge.net/project/mcrypt/MCrypt/2.6.8/mcrypt-2.6.8.tar.gz zlib-1.2.11.tar.gz file:///D:/chrome/Downloads/zlib-1.2.11.tar.gz libgd-2.1.0.tar.gz https://bitbucket.org/libgd/gd-libgd/downloads/libgd-2.1.0.tar.gz freetype-2.4.0.tar.gz http://download.savannah.gnu.org/releases/freetype/freetype-2.4.0.tar.gz libpng-1.2.59.tar.gz ftp://ftp.simplesystems.org/pub/libpng/png/src/libpng12/libpng-1.2.59.tar.gz jpegsrc.v6b.tar.gz http://www.ijg.org/files/jpegsrc.v6b.tar.gz apr-1.4.6.tar.gz http://archive.apache.org/dist/apr/apr-1.4.6.tar.gz apr-util-1.4.1.tar.gz http://archive.apache.org/dist/apr/apr-util-1.4.1.tar.gz pcre-8.34.tar.gz http://sourceforge.net/projects/pcre/files/pcre/8.34/pcre-8.34.tar.gz ncurses-6.2.tar.gz（推荐） http://ftp.gnu.org/pub/gnu/ncurses/ncurses-6.2.tar.gz memcache-3.0.8.tgz http://pecl.php.net/get/memcache-3.0.8.tgz memcached-1.4.17.tar.gz http://www.memcached.org/files/memcached-1.4.17.tar.gz 解压脚本（一部分） 1234567891011121314151617181920[root@localhost ~]# vi tar.sh#建立解压缩脚本#! /bin/bash#标称是 Shell脚本cd /usr/local/src/#进入保存源妈包的目录ls *.tar.gz &gt; /usr/local/src/ls.log#把所有以.tar .gz结尾的文件名覆盖写入ls.log文件ls *.tgz &gt;&gt; /usr/local/src/ls.log#把所有以.tgz结尾的文件名追加写入ls.log文件file=$(cat /usr/local/src/ls.log)#读取 Is.log 文件中的内容,赋子变量filefor i in $file#for循环,每次德环把变量file中的一个文件名 do tar -zxf $i #解压缩毎个压缩文件 donerm -rf /usr/local/src/ls.log#删除临时文件ls.log Linux libxml2安装 先查看一下含python-devel的包 1yum search python | grep python-devel 安装python-devel 1yum -y install platform-python-devel.x86_64 进入解压缩之后的源码目录，因为 “./configure”、”make” 和 “make install” 操作的都是当前所在目录，所以一定要进入解压缩之后的源码目录 1cd /usr/local/src/libxml2-2.9.10 编译前的准备和配置，这一步主要检查安装需要的系统环境、配置软件需要的功能选项，并生成配置安装文件 Makefile，以后的编译与编译安装过程需要依赖 Makefile 文件 12./configure --prefix=/usr/local/libxml2/#“--prefix=/usr/local/libxml2/”用于指定安装位置 我们一般会将源码包安装到 /usr/local/ 目录中，这个目录是 Linux 的默认源码包安装目录，并不推荐大家随意更改。至于安装目录名称，如果只是单独安装这个软件，则目录名称可以随意指定，不一定非要叫“libxml2”。但是我们在搭建 LAMP 环境时，这个软件会被后面的软件所调用，如果修改了安装目录名称，那么后面一系列的安装命令都要进行修改，非常容易报错，所以不建议大家随意修改 编译，也就是依靠 gcc 把源码包翻译为二进制的机器语言包 1make 编译安装，这一步才会真正向 /usr/local/ 目录中写入数据，这条命令执行之后，就会建立 /usr/local/libxml2/ 目录，并在目录下生成相应的文件 1make install Linux libmcrypt安装 进入解压缩目录 1cd /usr/local/src/libmcrypt-2.5.8 编译前配置，并指定安装位置 1./configure --prefix=/usr/local/libmcrypt 编译 1make 编译安装 1make install 安装 libltdl 库，在安装完 libmcrypt 之后，有些 Linux 还需要安装 libltdl 库，这个库是 libmcrypt 的子软件，就在 libmcrypt 的源码包之中，所以要进入 /usr/local/libmcrypt 目录才能看到 1234cd /usr/local/src/libmcrypt-2.5.8/libltdl./configure --enable-ltdl-installmakemake install Linux mhash和mcrypt安装Linux mhash安装 12345678[root@localhost ~]# cd /usr/local/src/mhash-0.9.9.9#进入解压缩目录[root@localhost mhash-0.9.9.9]#./configure#没有指定安装位置。因为在mcrypt包安装时，会在默认位置查找mhash包，如果指定了安装位置，那么mcrypt包在安装时会报错[root@localhost mhash-0.9.9.9]# make#编译[root@localhost mhash-0.9.9.9]# make install#编译安装 Linux mcrypt安装 123456789[root@localhost ~]# cd /usr/local/src/mcrypt-2.6.8#进入源码目录[root@localhost mcrypt-2.6.8]# LD_LIBRARY_PATH=/usr/local/libmcrypt/lib:/usr/local/lib ./configure --with-libmcrypt-prefix=/usr/local/libmcrypt#LD_LIBRARY_PATH用于指定libmcrypt和mhash库的位置#./configure为编译前准备命令，--prefix用于指定libmcrypt软件位置[root@localhost mcrypt-2.6.8]# make#编译[root@localhost mcrypt-2.6.8]# make install#编译安装 在这里 mcrypt 并没有安装完成。因为 mcrypt 是 PHP 的模块，所以需要等到 PHP 安装完成之后，再继续安装。 Linux zlib和libpng安装Linux zlib安装 12345678[root@localhost ~]# cd /usr/local/src/zlib-1.2.11#进入zlib解压缩目录[root@localhost zlib-1.2.11]# ./configure#编译前配置，没有指定安装位置，zlib会安装到系统的默认位置。这是为了让libpng可以在默认位置中找到zlib。如果指定了zlib的安装位置，那么libpng在安装时可能会报错[root@localhost zlib-1.2.11]# make#编译[root@localhost zlib-1.2.11]# make install#编译安装 Linux libpng安装 12345678[root@localhost zlib-1.2.11]# cd /usr/local/src/libpng-1.2.59#进入libpng解压缩目录[root@localhost libpng-1.2.59]# ./configure --prefix=/usr/local/libpng#编译前配置，指定安装位置[root@localhost libpng-1.2.59]# make#编译[root@localhost libpng-1.2.59]# make install#编译安装 Linux jpeg6安装 手工建立必需的目录 12345678910[root@localhost root]# mkdir /usr/local/jpeg6#建立jpeg6软件安装目录[root@localhost root]# mkdir /usr/local/jpeg6/bin#建立存放命令的目录[root@localhost root]# mkdir /usr/local/jpeg6/lib#创建jpeg6函数库文件所在目录[root@localhost root]# mkdir /usr/local/jpeg6/include#建立存放头文件的目录[root@localhost root]# mkdir -p /usr/local/jpeg6/man/man1#建立存放帮助手册的目录 注意，这些目录必须手工建立，否则安装过程会报错 编译与安装 123456789101112[root@localhost libpng-1.2.59]# cd /usr/local/src/jpeg-6b/#进入jpeg6解压缩目录[root@localhost jpeg-6b]# ./configure --prefix=/usr/local/jpeg6/ --enable-shared --enable-static#编译前配置#--prefix指定安装位置#--enable-shared建立共享库使用的GNU的libtool#--enable-static建立静态库使用的GNU的libtool[root@localhost jpeg-6b]# make#编译[root@localhost jpeg-6b]# make install#编译安装 在上面的过程中如果直接编译会出现如下报错： 出现报错是由于libtool版本过低所导致，重新下载新版本的libtool以默认方式安装即可，过程如下： 下载 1wget http://mirror.keystealth.org/gnu/libtool/libtool-2.4.6.tar.gz 如果下载慢的话可以先在windows中下载，然后再通过WinWPS上传到linux中；直接在linux centos中下载记得要打开网络； 下载完成后将libtool-2.4.6.tar.gz放到/usr/local/src目录下； 安装 1234567891011#进入/usr/local/src目录cd /usr/local/src#解压缩源码包tar -zxvf libtool-2.4.6.tar.gz#进入libtool-2.4.6目录cd libtool-2.4.6#配置编译安装./configuremakemake install 修改配置文件 进入jpeg-6b的源码目录，执行以下步骤 ： 12cp /usr/share/libtool/build-aux/config.sub ./cp /usr/share/libtool/build-aux/config.guess ./ 重新安装jpeg6 1234cd /usr/local/src/jpeg-6b/./configure --prefix=/usr/local/jpeg6/ --enable-shared --enable-staticmakemake install Linux freetype安装12345678[root@localhost jpeg-6b]# cd /usr/local/src/freetype-2.4.0#进入freetype解压缩目录[root@localhost freetype-2.4.0]# ./configure --prefix=/usr/local/freetype#编译前配置，指定安装位置[root@localhost freetype-2.4.0]# make#编译[root@localhost freetype-2.4.0]# make install#编译安装 Linux gd库安装 进入 gd 库解压缩目录 1[root@localhost ~]# cd /usr/local/src/libgd-2.1.0 修改gd_png.c文件 12[root@localhost libgd-2.1.0]# vim ./src/gd_png.c#把文件中 include \"png.h\"改为 include \"/usr/local/libpng/include/png.h\" 如果不修改 gd_png.c 文件，则默认会在当前目录下搜索 png.h 文件；因为 libpng 安装在 /usr/local/libpng/ 目录中，所以在当前目录不能找到，就会报错；把 png.h 的正确路径“/usr/local/libpng/include/png.h”写入，报错就能解决。； 编译安装 1234567891011[root@localhost libgd-2.1.0]# ./configure --prefix=/usr/local/gd2 --with-jpeg=/usr/local/jpeg6 --with-freetype=/usr/local/freetype --with-png=/usr/local/libpng--prefix #指定安装位置--with-jpeg #指定jpeg6的位置--with-freetype #指定freetype的位置--with-png #指定libpng的位置#编译前配置#因为gd库需要调用前面安装的zlib、jpeg、freetype和libpng，所以需要指定它们的安装位置，才能正确调用这些软件。不过因为前面安装zlib时没有指定安装位置，所以不用指定——with-zlib=/usr/local/zlib/选项，gd会自动到默认安装位置中寻找zlib[root@localhost libgd-2.1.0]# make#编译[root@localhost libgd-2.1.0]# make install#编译安装 Linux Apache安装 复制 apr 和 apr-util 库，这里是 Apache 2.4 自己的 Bug，我们必须手工复制 apr、apr-util 和 pcre 这三个库，才可以正确安装 Apache 2.4； 123cp -r /usr/local/src/apr-1.4.6 /usr/local/src/httpd-2.4.43/srclib/aprcp -r /usr/local/src/apr-util-1.4.1 /usr/local/src/httpd-2.4.43/srclib/apr-util#这两个包先要解压缩，然后改名复制到指定位置 安装 pcre 源码包，pcre 是一个用 C 语言编写的正则表达式函数库，Apache 和 PHP 默认使用的就是 pcre 正则表达式规则 ； 12345678[root@localhost ~]# cd /usr/local/src/pcre-8.34#进入解压缩目录[root@localhost pcre-8.34]# ./configure#编译前配置[root@localhost pcre-8.34]# make#编译[root@localhost pcre-8.34]# make install#编译安装 进入 Apache 解压缩目录 1[root@localhost pcre-8.34]# cd /usr/local/src/httpd-2.4.43 编译前配置 12345678[root@localhost httpd-2.4.43]# ./configure --prefix=/usr/local/apache2 --sysconfdir=/usr/local/apache2/etc --with-included-apr --enable-so --enable-deflate=shared --enable-expires=shared --enable-rewrite-shared--prefix #指定Apache安装目录--sysconfdir #指定Apache配置文件保存目录--with-included-apr #使用捆绑APR/APR-Util 的副本--enable-so #以动态共享对象(DSO)方式编译--enable-deflate=shared #启用编小传输编玛支持的模块--enable-expires=shared #根据用户的特别设定来生成失效和隐藏控制的HTTP头信息--enable-rewrite-shared #启动重写功能的模块 编译安装 12[root@localhost httpd-2.4.43]# make[root@localhost httpd-2.4.43]# make install 启动Apache，并进行测试 12345[root@localhost httpd-2.4.43]# /usr/local/apache2/bin/apachectl start#启动Apache[root@localhost httpd-2.4.43]# netstat -tlun | grep 80tcp6 0 0 :::80 :::* LISTEN #80端口已经启动，说明Apache已经启动了 用浏览器测试一下Apache服务器是否可以访问； 设置 Apache 开机自启 123vim /etc/rc.d/rc.local #在文件中加入apache启动命令/usr/local/apache2/bin/apachectl start Linux ncurses安装123456789[root@localhost ~]# cd /usr/locai/src/ncurses-6.2#进入ncurses解压缩目录[root@localhost ncurses-6.2]# ./configure --with-shared --without-debug --without-ada --enable-overwrite --with-shared #生成共享库--without-debug #不生成 debug 库--without-ada #不编译为ada绑定，因为进入chroot环境不能用ada--enable-overwrite #定义把头文件安装到/tools/include目录下，而不是/tools/include/ncurses 目录下[root@localhost ncurses-6.2]# make [root@localhost ncurses-6.2)# make install Linux MySQL安装 添加 mysql 用户和 mysql 用户组 1234[root@localhost ~]# groupadd mysql#添加mysql用户组[root@localhost ～]# useradd -g mysql mysql#添加mysql用户，同时指定mysql用户的初始组是mysql组 这里添加的 mysql 用户和用户组是稍后用来给 MySQL 安装目录分配权限用的，所以并不需要设定密码，因为这个用户是不能直接登录 Linux 系统的 ； 安装 cmake命令 123yum -y install cmakeyum -y install bisonyum -y install gcc gcc-c++ ncurses ncurses-devel 进入 MySQL 解压缩目录 1[root@localhost ~]# cd /usr/local/src/mysql-5.5.39 编译前配置 123456789101112131415[root@localhost mysql-5.5.39]# cmake -DCMAKE_INSTALL_PREFIX=/usr/local/mysql -DMYSQL_UNIX_ADDR=/tmp/mysql.sock -DEXTRA_CHARSETS=all -DDEFAULT_CHARSET=utf8 -DDEFAULT_COLLATION=utf8_general_ci -DWITH_MYISAM_STORAGE_ENGINE=1 -DWITH_INNOBASE_STORAGE_ENGINE=1 -DWITH_MEMORY_STORAGE_ENGINE=1 -DWITH_READLINE=1 -DENABLED_LOCAL_INFILE=1 -DMYSQL_USER=mysql -DMYSQL_TCP_PORT=3306-DCMAKE_INSTALL_PREFIX=/usr/local/mysql #指定安装位置-DMYSQL_UNIX_ADDR=/tmp/mysql.sock #指定socket（套接字）文件位置-DEXTRA_CHARSETS=all #支持所有的扩展字符集-DDEFAULT_CHARSET=utf8 #指定默认字符集-DDEFAULT_COLLATION=utf8_general_ci #指定默认字符校对-DWITH_MYISAM_STORAGE_ENGINE=1 #安装myisam存储引擎-DWITH_INNOBASE_STORAGE_ENGINE=1 #安装innodb存储引擎-DWITH_MEMORY_STORAGE_ENGINE=1 #安装memory存储引擎-DWITH_READLINE=1 #支持readline库-DENABLED_LOCAL_INFILE=1 #启用加载本地数据-DMYSQL_USER=mysql #指定MySQL运行用户-DMYSQL_TCP_PORT=3306 #指定MySQL端口 编译安装 12[root@localhost mysql-5.5.39]# make[root@localhost mysql-5.5.39]# make install 在编译的时候出现错误： 解决方法： 12vim /usr/local/src/mysql-5.5.39/client/mysql.cc#在第2658行的'\\0'q\\前面加上(char*)，强制转换为字符指针 重新配置，编译安装 生成MySQL的配置文件，并修改配置文件；这个配置文件不用手工建立，在 MySQL 安装目录中给我们准备了模板文件，只需把模板文件复制到指定位置并改名即可 1[root@localhost mysql-5.5.39]# cp /usr/local/mysql/support-files/my-medium.cnf /etc/my.cnf 修改 MySQL 安装目录的权限 123456[root@localhost mysql-5.5.39]# cd /usr/local/mysql#进入MySQL安装目录[root@localhost mysql]# chown -R root /usr/local/mysql#把当前目录下所有文件的所有者改为root用户[root@localhost mysql]# chgrp -R mysql /usr/local/mysql#把当前目录下所有文件的所属组改为mysql组 初始化数据库；源码包安装的 MySQL 中所有的数据库默认都保存在 /usr/local/mysql/data/ 目录中，MySQL 的初始数据库 mysql 库和 test 库也会保存在这个目录中；但是，如果仔细查看 /usr/local/mysql/data/ 目录，就会发现这个目录中只有两个空目录，并没有任何数据。也就是说，MySQL 中的所有数据库是不存在的，那么这个 MySQL 是不能使用的，因为 MySQL 的所有用户是要保存在 user 表中的，而 user 表保存在 mysql 库中，而 mysql 库是保存在 /usr/local/mysql/data/ 目录中的；那么，我们现在需要在 data 目录中建立 MySQL 的初始数据库 ； 1/usr/local/mysql/scripts/mysql_install_db --user=mysql 继续修改MySQL安装目录的权限 1234[root@localhost mysql]# chown -R root /usr/local/mysql#把当前目录下所有文件的所有者改为root用户[root@localhost mysql]# chown -R mysql /usr/local/mysql/data#把data目录的所有者改为mysql用户 启动 MySQL 服务器，并保证 mysql 服务开机自启动； MySQL 服务器的安装已经完成，我们可以尝试启动 MySQL 服务器： 1234[root@localhost mysql]# /usr/local/mysql/bin/mysqld_safe --user=mysql &amp;#使用mysql用户启动MySQL服务器，并在后台持续运行[root@localhost ~]# netstat -tlun | grep 3306tcp 0 0 0.0.0.0:3306 0.0.0.0:* LISTEN 设置 mysql 服务开机自启动 ； 123[root@localhost ~]# vim /etc/rc.local#修改自启动配置文件，加入如下的mysql服务标准启动命令/usr/local/mysql/bin/mysqld_safe --user=mysql &amp; 设定 MySQL 中 root 用户的密码，并登录； MySQL 数据库的管理员也是 root，我们需要给 MySQL 的本地用户设定一个密码，这里使用 Linux 的命令 mysqladmin 设定 MySQL 的 root 用户的密码 123456789101112131415161718192021222324252627282930313233343536373839404142434445[root@localhost mysql]# /usr/local/mysql/bin/mysqladmin -u root password 123456#给MySQL的root用户设定密码为123456[root@localhost mysql]# /usr/local/mysql/bin/mysql -u root -p#使用root用户登录mysqlEnter password： #输入正确的密码Welcome to the MySQL monitor. Commands end with ; or \\g.Your MySQL connection id is 5Server version: 5.5.39-log Source distributionCopyright (c) 2000, 2014, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.mysql&gt; #看到了MySQL的交互界面mysql&gt; \\s #查询服务器状态信息--------------/usr/local/mysql/bin/mysql Ver 14.14 Distrib 5.5.39, for Linux (x86_64) using readline 5.1Connection id: 6Current database: Current user: root@localhostSSL: Not in useCurrent pager: stdoutUsing outfile: ''Using delimiter: ;Server version: 5.5.39-log Source distributionProtocol version: 10Connection: Localhost via UNIX socketServer characterset: utf8Db characterset: utf8Client characterset: utf8Conn. characterset: utf8UNIX socket: /tmp/mysql.sockUptime: 16 min 56 secThreads: 1 Questions: 11 Slow queries: 0 Opens: 33 Flush tables: 2 Open tables: 0 Queries per second avg: 0.010--------------mysql&gt; exit#退出MySQL Linux安装PHP 安装libtool和libtool-ltdl 12[root@localhost ~]# yum -y install \"libtool*\"[root@localhost ~]# yum -y install \"libtool-ltdl*\" 编译安装 php 源码包 12345678910111213141516171819202122232425[root@localhost mysql]# cd /usr/local/src/php-5.5.23[root@localhost php-5.5.23]# ./configure --prefix=/usr/local/php --with-config-file-path=/usr/local/php/etc --with-apxs2=/usr/local/apache2/bin/apxs --with-mysql=/usr/local/mysql --with-libxml-dir=/usr/local/libxml2 --with-jpeg-dir=/usr/local/jpeg6 --with-png-dir=/usr/local/libpng --with-freetype-dir=/usr/local/freetype --with-gd --with-mcrypt=/usr/local/libmcrypt --with-mysqli=/usr/local/mysql/bin/mysql_config --enable-soap --enable-mbstring=all --enable-sockets --with-pdo-mysql=/usr/local/mysql--prefix=/usr/local/php #指定安装位置--with-config-file-path=/usr/local/php/etc #指定PHP配置文件位置--with-apxs2=/usr/local/apache2/bin/apxs #调用apache2--with-mysql=/usr/local/mysql #调用mysql--with-libxml-dir=/usr/local/libxml2 #调用libxml2库--with-jpeg-dir=/usr/local/jpeg6 #调用jpeg库--with-png-dir=/usr/local/libpng #调用libpng库--with-freetype-dir=/usr/local/freetype #调用freetype库--with-gd #调用gd库，不指定就会利用php自带的gd source编译--with-mcrypt=/usr/local/libmcrypt #调用libmcrypt库--with-mysqli=/usr/local/mysql/bin/mysql_config #增加MysqlLi功能--enable-soap #支持SOAP和Web Services--enable-mbstring=all #支持多字节字符串--enable-sockets #支持socket（套接字）通信--with-pdo-mysql=/usr/local/mysql #启用mysql的pdo模块支持[root@localhost php-5.5.23]# make#编译[root@localhost php-5.5.23]# make install#编译安装 建立PHP配置文件，这个配置文件不用手工建立，也是有模板文件的，只需复制即可 1[root@localhost php-5.5.23]# cp /usr/local/src/php-5.5.23/php.ini-production /usr/local/php/etc/php.ini 让apache可以识别“.php”扩展名 在安装 PHP 时，在 ./configure 命令中使用 –with-apxs2=/usr/local/apache2/bin/apxs 选项，已经把 PHP 作为模块被 apache 识别了；但是，apache 并不知道哪些扩展名的文件要调用 PHP 模块来解析（如果是 apache 不认识的扩展名，那么客户端在访问时，apache 不会尝试解析，而是提示客户端下载），所以我们需要修改 apache 的配置文件，让 apache 可以识别PHP 脚本的扩展名 ； 1234[root@localhost php-5.5.23]# vim /usr/local/apache2/etc/httpd.conf#修改apache配置文件，加入如下内容AddType application/x-httpd-php .php .phps#这句话的意思是：如果遇到.php和.phps扩展名，则调用PHP模块来解析这个文件的内容 重启Apache服务器；我们修改了 apache 的配置文件，如果想让这个修改生效，那么必须重启 Apache 服务器； 12[root@localhost php-5.5.23]# /usr/local/apache2/bin/apachectl stop[root@localhost php-5.5.23]# /usr/local/apache2/bin/apachectl start 这里最好不要使用 restart 参数，因为对于源码包的 apache 启动命令，restart 参数有时会不起作用 ； 测试PHP环境是否正常；对源码包安装的 apache 来讲，网页的默认保存位置是 /usr/local/apache2/htdocs/ 目录。为了测试 PHP 环境是否正常，我们需要在这个目录中建立一个 PHP 文件，看看这个文件是否可以正常显示 ; 1234[root@localhost php-5.5.23]# vim /usr/local/apache2/htdocs/index.php&lt;?php phpinfo();?&gt; 用浏览器访问index.php; 继续安装 mcrypt 因为 mcrypt 是 PHP 的模块，所以需要等到 PHP 安装完成之后，才能按照以下步骤继续安装 mcrypt； 编译安装 12345678910111213[root@localhost ~]# cd cd /usr/local/src/php-5.5.23/ext/mcrypt#进入PDO模块的解压缩目录[root@localhost mcrypt]# /usr/local/php/bin/phpize#使用phpize加载PDO模块[root@localhost mcrypt]# ./configure --with-php-config=/usr/local/php/bin/php-config --with-mcrypt=/usr/local/libmcrypt--with-php-config=/usr/local/php/bin/php-config #指定php-config文件的位置--with-mcrypt=/usr/local/libmcrypt #调用libmcrypt[root@localhost mcrypt]# make#编译[root@localhost mcrypt]# make install#编译安装 修改PHP配置文件，要想让 PHP 可以识别和使用 memcache 和 mcrypt 模块，还需要修改一下 PHP 的配置文件；这里要先安装memcache（“Linux memcache安装和配置（自启动）”）； 12345678[root@localhost mcrypt]# vim /usr/local/php/etc/php.ini#修改PHP配置文件extension_dir = \"./\"#在文件中找到上面这句话，把它改成下面这句extension_dir=\"/usr/local/php/lib/php/extensions/no-debug-zts-20121212/\"#在加入以下两句话; extension=\"memcache.so\"; extension=\"mcrypt.so\" 安装完成之后，重启 apache，就可以在 phpinfo 页面中看到这两个模块了； 12[root@localhost php-5.5.23]# /usr/local/apache2/bin/apachectl stop[root@localhost php-5.5.23]# /usr/local/apache2/bin/apachectl start Linux memcache安装和配置（自启动）memcache客户端安装 123456789101112[root@localhost src]# yum -y install zlib-devel#安装底层依赖包zlib-devel[root@localhost src]# cd /usr/local/src/memcache-3.0.8#进入memcache-3.0.8解压缩目录[root@localhost memcache-3.0.8]# /usr/local/php/bin/phpize#用phpize加载memcache模块；这条命令一定要进入memcache目录才能正确执行[root@localhost memcache-3.0.8]# ./configure --with-php-config=/usr/local/php/bin/php-config#编译前配置，指定php-config文件的位置[root@localhost memcache-3.0.8]# make#编译[root@localhost memcache-3.0.8]# make install#编译安装 memcache服务器端安装 安装 memcached-1.4.17 服务器端程序 ： 1234567891011121314151617181920[root@localhost ~]cd /usr/local/src/memcached-1.4.17[root@localhost memcached-1.4.17]# yum -y install libevent-devel#安装memcache，需要先安装libevent-devel包[root@localhost memcached-1.4.17]# ./configure --prefix=/usr/local/memcache#编译前配置[root@localhost memcached-1.4.17]# make#编译[root@localhost memcached-1.4.17]# make install#编译安装[root@localhost memcached-1.4.17]# useradd memcache#添加memcache用户，这个用户只是用来启动服务的，不用设置密码[root@localhost memcached-1.4.17]#/usr/local/memcache/bin/memcached -u memcache &amp;#在后台启动memcache服务器[root@localhost memcached-1.4.17]# netstat -tlun | grep 11211tcp 0 0 0.0.0.0:11211 0.0.0.0:* LISTENtcp 0 0::11211 ::* LISTENudp 0 0 0.0.0.0:11211 0.0.0.0：*udp 0 0::11211 ::*#memcache的端口是11211，已经启动了 还要保证 memcache 开机自启动，命令如下： 1234567[root@localhost memcached-1.4.17]# vim /etc/rc.local#修改自启动文件touch /var/lock/subsys/local/usr/local/apache2/bin/apachectl start/usr/local/mysql/bin/mysqld_safe --user=mysql &amp;/usr/local/memcache/bin/memcached -u memcache &amp;#加入memcache启动命令 最终，LAMP 环境需要自启动的服务是 apache、mysql 和 memcache。 linux phpmyadmin安装及配置复制 phpMyAdmin 脚本文件/usr/local/apache2/中的htdocs相当于网站根目录WWW； 123456[root@localhost ~]# cp -r /usr/local/src/phpMyAdmin-4.1.4-all-languages /usr/local/apache2/htdocs/phpmyadmin#改名复制phpMyAdmin到apache的默认网页目录中[root@localhost ~]# cd /usr/local/apache2/htdocs/phpmyadmin/#进入phpmyadmin目录[root@localhost phpmyadmin]# cp config.sample.inc.php config.inc.php#复制配置模板文件为真正的配置文件 phpMyAdmin 和前面章节中介绍安装的源码包都不太一样，不再是使用 C 语言编写的源码包程序，而是一个使用 PHP 脚本编写的、通过浏览器解释执行的网站项目。所以在安装时，只需把 phpMyAdmin 复制到 apache 的默认网页目录中，并通过浏览器来解释执行这个脚本即可。 修改 phpMyAdmin 的验证方式 phpMyAdmin 默认识别 3 种验证方式： HTTP 身份验证：调用apache的加密目录模块，在用户登录时，弹出登录窗口，需要输入正确的用户名和密码才能正常登录； cookie 身份验证：是HTTP身份验证模式的补充，不能使用HTTP身份验证模式的场合都可以使用它，它要求用户必须允许来自phpMyAdmin的cookie进入自己的计算机，即用户需要在浏览器中开启客户端的cookie功能； config 身份验证：客户端在登录时不再需要输入用户名和密码，就可以直接登录，因为用户名和密码是用明文方式写入config.inc.php配置文件的，所以这种验证方式并不安全，不推荐使用； HTTP身份验证配置；要想使用 HTTP 身份验证，只需要修改 PHP 的配置文件 config.inc.php，把验证方式改为“http”即可； 123[root@localhost phpmyadmin]# vim config.inc.php把 $cfg['Servers'][$i]['auth_type'] = 'cookie';改为 $cfg['Servers'][$i]['auth_type'] = 'http'; 保存退出后，就可以在浏览器中输入“http://127.0.0.1/phpmyadmin/index.php”进行访问了； 在登录对话框中输入 MySQL 的管理员“root”和我们刚刚安装 MySQL 时设定的密码“123456”就能登录 phpMyAdmin了；","link":"/LAMP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"}],"tags":[],"categories":[]}